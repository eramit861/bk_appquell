<?php

namespace App\Http\Controllers\Attorney;

use App\Helpers\AddressHelper;
use App\Helpers\Helper;
use App\Helpers\VideoHelper;
use App\Http\Controllers\AttorneyController;
use App\Mail\ConciergeAutoGenerated;
use App\Models\AttorneySettings;
use App\Models\NotificationTemplate;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;

class NotificationTemplatesController extends AttorneyController
{
    public function index(Request $request)
    {
        $attorney_id = Helper::getCurrentAttorneyId();
        $keyword = $request->query('q') ?? '';
        $type = $request->query('type', 'template');

        $query = NotificationTemplate::where('attorney_id', $attorney_id)
            ->leftJoin('users', 'tbl_notification_template.added_by', '=', 'users.id');

        $filtered_mail = '';

        // Add time_frame conditions based on type
        if ($type == 'template' || $type == 'broadcast') {
            $query->where(function ($q) {
                $q->whereNull('time_frame')
                    ->orWhere('time_frame', '');
            });
        } elseif ($type == 'automated') {
            $query->where('time_frame', '>', 0);
            $attorney_company = \App\Models\AttorneyCompany::where('attorney_id', $attorney_id)->first();
            $attorney_company = (!empty($attorney_company)) ? $attorney_company : [];
            $company_name = !empty($attorney_company) ? $attorney_company->company_name : '';
            $filtered_name = Helper::validate_doc_type($company_name, true);
            $filtered_name = str_replace('_', '', $filtered_name);
            $filtered_mail = strtolower($filtered_name).'@bkquestionnaire.com';
        }

        if (!empty($request->query('q'))) {
            $query->Where(function ($q) use ($request): void {
                $q->Where('noti_tenp_subject', 'like', '%' . $request->query('q') . '%');
                $q->orWhere('noti_tenp_body', 'like', '%' . $request->query('q') . '%');
            });
        }

        $query = $query->select(['tbl_notification_template.*', 'users.name as added_by_name'])->orderBy('tbl_notification_template.id', 'DESC')->get();
        $query = isset($query) && !empty($query) ? $query->toArray() : [];

        $video = VideoHelper::getAttorneyVideos(Helper::ATTORNEY_CLIENT_MANAGEMENT_VIDEO);

        $clients = [];
        if ($type == 'broadcast') {
            $clients = User::leftJoin('tbl_clients_attorney', 'users.id', '=', 'tbl_clients_attorney.client_id')
                ->where(['role' => User::CLIENT, 'tbl_clients_attorney.attorney_id' => $attorney_id])
                ->select(['users.id', 'users.name'])->get();
            $clients = isset($clients) && !empty($clients) ? $clients->toArray() : [];
        }

        return view('attorney.notification_template.index', [
            'video' => $video,
            'keyword' => $keyword,
            'templates' => $query,
            'clients' => $clients,
            'type' => $type,
            'filtered_mail' => $filtered_mail,
        ]);
    }

    public function setup(Request $request)
    {
        if ($request->isMethod('post')) {
            DB::beginTransaction();
            try {
                $attorney_id = Helper::getCurrentAttorneyId();
                $input = $request->all();
                $dateTime = date('Y-m-d H:i:s');
                $timeFrame = Helper::validate_key_value('time_frame', $input, 'radio');
                $dataToSave = [
                    'attorney_id' => $attorney_id,
                    'noti_tenp_subject' => Helper::validate_key_value('subject', $input),
                    'noti_tenp_body' => Helper::validate_key_value('body', $input),
                    'time_frame' => $timeFrame,
                    'added_by' => Auth::user()->id,
                    'created_at' => $dateTime,
                    'updated_at' => $dateTime,
                ];
                NotificationTemplate::create($dataToSave);
                DB::commit();

                return redirect()->route('notification_template_list')->with('success', 'Template has been saved successfully.');
            } catch (\Exception $e) {
                DB::rollBack();

                return redirect()->route('notification_template_list')->with('error', 'Something went wrong, try again!');
            }
        }
    }
    public function automated_setup(Request $request)
    {
        if ($request->isMethod('post')) {
            DB::beginTransaction();
            try {
                $attorney_id = Helper::getCurrentAttorneyId();
                $input = $request->all();
                $dateTime = date('Y-m-d H:i:s');
                $timeFrame = Helper::validate_key_value('time_frame', $input, 'radio');
                $notiTenpBody = Helper::validate_key_value('body', $input);

                // Use updateOrCreate to update existing record or create new one
                // based on attorney_id and noti_tenp_body combination
                $dataToCreate = [
                    'attorney_id' => $attorney_id,
                    'noti_tenp_subject' => Helper::validate_key_value('subject', $input),
                    'noti_tenp_body' => $notiTenpBody,
                    'time_frame' => $timeFrame,
                    'added_by' => Auth::user()->id,
                    'created_at' => $dateTime,
                    'updated_at' => $dateTime,
                ];

                NotificationTemplate::updateOrCreate(
                    [
                        'attorney_id' => $attorney_id,
                        'noti_tenp_body' => $notiTenpBody
                    ],
                    $dataToCreate
                );

                DB::commit();

                return redirect()->route('notification_template_list', ['type' => 'automated'])->with('success', 'Template has been saved successfully.');

            } catch (\Exception $e) {
                DB::rollBack();

                return redirect()->route('notification_template_list')->with('error', 'Something went wrong, try again!');
            }
        }
    }
    public function remove($id, $type)
    {
        DB::beginTransaction();
        try {
            if (empty($id)) {
                DB::commit();

                return redirect()->route('notification_template_list')->with('error', 'Something went wrong, try again!');
            }

            NotificationTemplate::where('id', $id)->delete();
            DB::commit();

            return redirect()->route('notification_template_list', ['type' => $type])->with('success', 'Template has been removed successfully.');
        } catch (\Exception $e) {
            DB::rollBack();

            return redirect()->route('notification_template_list')->with('error', 'Something went wrong, try again!');
        }
    }

    public function brodcast(Request $request)
    {
        if ($request->isMethod('post')) {
            DB::beginTransaction();
            try {
                $attorney_id = Helper::getCurrentAttorneyId();
                $attorney_name = User::whereId($attorney_id)->first()->name;

                $input = $request->all();

                $selected_clients = Helper::validate_key_value('selected_clients', $input);
                $selected_template = Helper::validate_key_value('selected_template', $input, 'radio');
                $email = Helper::validate_key_value('email', $input, 'radio');
                $mobile = Helper::validate_key_value('mobile', $input, 'radio');

                $template = NotificationTemplate::whereId($selected_template)->first();
                $template = isset($template) && !empty($template) ? $template->toArray() : [];

                if (empty($template)) {
                    DB::commit();

                    return redirect()->route('notification_template_list', ['type' => 'broadcast'])->with('error', 'Something went wrong, try again!');
                }

                $subject = Helper::validate_key_value('noti_tenp_subject', $template);
                $body = Helper::validate_key_value('noti_tenp_body', $template);
                $body = str_replace('{attorney_name}', $attorney_name, $body);

                $clients = User::whereIn('id', $selected_clients)->select(['id', 'name', 'email', 'phone_no'])->get();

                if (!empty($clients)) {
                    foreach ($clients as $client) {
                        $msg_body = $body;
                        $msg_body = str_replace('{client_name}', $client->name, $msg_body);

                        if ($email == 1 && !empty($client->email)) {
                            if (AttorneySettings::isEmailEnabled($attorney_id, 'client_automated_process_overview_mail', $client->id)) {
                                Mail::to($client->email)->send(new ConciergeAutoGenerated($subject, $msg_body));
                            }
                        }
                        if ($mobile == 1 && !empty($client->phone_no)) {
                            AddressHelper::sendSakariMobileTextMessage($client, $msg_body);
                        }
                    }
                }
                DB::commit();

                return redirect()->route('notification_template_list', ['type' => 'broadcast'])->with('success', 'Template has been saved successfully.');
            } catch (\Exception $e) {
                DB::rollBack();

                return redirect()->route('notification_template_list', ['type' => 'broadcast'])->with('error', 'Something went wrong, try again!');
            }
        }
    }

    public function preview(Request $request)
    {
        $templateType = $request->input('templateType');
        if (empty($templateType)) {
            return response()->json(Helper::renderJsonError('Something went wrong.'))->header('Content-Type: application/json;', 'charset=utf-8');
        }

        $message = '';

        $incompleteSections = [];
        if ($templateType == 1) {
            $incompleteSections[] = "• Basic Info Section";
        }
        $incompleteSections[] = "• Property Section";
        $incompleteSections[] = "• Debts Section";
        $incompleteSections[] = "• Current Income Section";
        $incompleteSections[] = "• Current Expenses Section";
        $incompleteSections[] = "• Statement of Financial Affairs Section";
        $incompleteSections[] = "• Documents uploaded";

        $sectionsList = implode("\n", $incompleteSections);
        if ($templateType == 2) {
            $message = "We're glad to see you have completed the Basic Info section, please log back into BK Questionnaire and let's get the:\n\n" .
                      $sectionsList . "\n\n" .
                      "Let's get the above sections finished up so you can get the stress relief you need.";
        } else {
            $message = "You have not completed or started your questionnaire as of yet. Lets get the process going, so you can get the stress relief you need.";
        }

        $returnHTML = view('attorney.notification_template.automated_template_preview')
            ->with([
                'message' => $message,
                'templateType' => $templateType,
            ])
            ->render();

        return response()->json(['status' => 1, 'html' => $returnHTML]);

    }

}
